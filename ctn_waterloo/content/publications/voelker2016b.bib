@inproceedings{voelker2016b,
  author = {Knight, James and Voelker, Aaron R. and Mundy, Andrew and Eliasmith, Chris and Furber, Steve},
  booktitle = {The 2016 International Joint Conference on Neural Networks (IJCNN)},
  title = {Efficient SpiNNaker simulation of a heteroassociative memory using the Neural Engineering Framework},
  publisher = {IEEE},
  year = {2016},
  month = {07},
  url = {https://www.researchgate.net/publication/305828018_Efficient_SpiNNaker_simulation_of_a_heteroassociative_memory_using_the_Neural_Engineering_Framework},
  keywords={Biological system modeling;Computational modeling;Decoding;Neural engineering;Neurons;Spinnaker;Neuromorphics},
  abstract = {The biological brain is a highly plastic system within which the efficacy and structure of synaptic connections are constantly changing in response to internal and external stimuli. While numerous models of this plastic behavior exist at various levels of abstraction, how these mechanisms allow the brain to learn meaningful values is unclear. The Neural Engineering Framework (NEF) is a hypothesis about how large-scale neural systems represent values using populations of spiking neurons, and transform them using functions implemented by the synaptic weights between populations. By exploiting the fact that these connection weight matrices are factorable, we have recently shown that static NEF models can be simulated very efficiently using the SpiNNaker neuromorphic architecture. In this paper, we demonstrate how this approach can be extended to efficiently support both supervised and unsupervised learning rules designed to operate on these factored matrices. We then present a heteroassociative memory architecture built using these learning rules and prove that it is capable of learning a human-scale semantic network. Finally we demonstrate a 100 000 neuron version of this architecture running on the SpiNNaker simulator with a speed-up exceeding 150x when compared to the Nengo reference simulator.},
  address = "Vancouver, British Columbia"
}
